name: Automatic update
on:
  workflow_dispatch:
  schedule:
    - cron: "5 7 */7 * *"

jobs:
  update-pre-commit:
    runs-on: ubuntu-latest
    env:
      GIT_USER: github-actions

    steps:
      - uses: actions/checkout@v2

      - id: setup-python
        uses: actions/setup-python@v2.2.2

      - name: Get pip cache dir
        id: pip-cache
        run: |
          CACHE_DIR=$(pip cache dir)
          echo "::set-output name=dir::${CACHE_DIR}"

      - name: Configure pip cache
        uses: actions/cache@v2.1.5
        with:
          path: ${{ steps.pip-cache.outputs.dir }}
          key: ${{ runner.os }}-pip-${{ steps.setup-python.outputs.python-version }}

      - name: Install pre-commit
        run: pip install -q pre-commit

      - name: Update pre-commit config
        run: pre-commit autoupdate

      - name: Ensure pre-commit config remains functional
        id: pre-commit-check
        run: pre-commit run --all-files

      - name: Setup git author
        run: |
          git config --local user.name ${GIT_USER}
          git config --local user.email "$(git --no-pager log --format=format:'%ae' -n 1)"
          git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}

      - name: Check for modified files after config update
        id: git-check-changes
        run: |
          UPDATED=$(if [[ -z "$(git status --porcelain)" ]]; then echo "false"; else echo "true"; fi)
          echo "::set-output name=updated::${UPDATED}"

      - name: Push pre-commit changes
        if: >
          steps.git-check-changes.outputs.updated == 'true'
        run: |
          git checkout -b github-action/pre-commit
          git commit -am "Update pre-commit config"
          git push --set-upstream origin HEAD:github-action/pre-commit

      - name: Create pre-commit update pull request
        uses: "actions/github-script@v4.0.2"
        if: >
          steps.git-check-changes.outputs.updated == 'true'
        with:
          github-token: "${{ secrets.GITHUB_TOKEN }}"
          script: |
            const pullRequest = context.payload.pull_request
            const repository = context.repo
            const title = 'Update pre-commit config'

            await github.pulls.create({
              owner: repository.owner,
              repo: repository.repo,
              title,
              head: 'github-action/pre-commit',
              base: 'main',
            });
