name: CI
on: [push, pull_request]

jobs:
  build:
    strategy:
      matrix:
        python-version: [3.6, 3.7, 3.8]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2.1.2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Get pip cache dir
        id: pip-cache
        run: |
          echo "::set-output name=dir::$(pip cache dir)"

      - name: pip cache
        uses: actions/cache@v2
        with:
          path: ${{ steps.pip-cache.outputs.dir }}
          key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-${{ matrix.python-version }}-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt -r requirements-dev.txt

      # - name: Install from source (required for the pre-commit tests)
      #   run: pip install .

      - name: Execute pytest
        run: pytest --cov=./ --cov-report=xml

      # - name: Upload coverage
      #   uses: codecov/codecov-action@v1

  code-checks:
    runs-on: ubuntu-latest
    needs:
      - "build"
    # can not push to master - it is protected
    if: >
      github.actor != 'github-actions' &&
      github.ref != 'refs/heads/master'
    env:
      GIT_USER: github-actions

    steps:
      - uses: actions/checkout@v2
      - id: setup-python
        uses: actions/setup-python@v2.1.2

      - name: Get pip black cache dir
        id: pip-cache-black
        run: |
          echo "::set-output name=dir::$(pip cache dir)"

      - name: pip cache
        uses: actions/cache@v2
        with:
          path: ${{ steps.pip-cache-black.outputs.dir }}
          key: ${{ runner.os }}-pip-black
          restore-keys: |
            ${{ runner.os }}-pip-${{ steps.setup-python.outputs.python-version }}

      - name: Setup git author
        run: |
          git config --local user.name ${GIT_USER}
          git config --local user.email "$(git --no-pager log --format=format:'%ae' -n 1)"
          git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}

      - name: Install black
        run: pip install black

      - name: Run black
        run: black .

      - name: Check for modified files after black run
        id: git-check-black
        run: echo ::set-output name=modified::$(if [[ -z "$(git status --porcelain)" ]]; then echo "false"; else echo "true"; fi)

      - name: Push black changes
        if: steps.git-check-black.outputs.modified == 'true'
        run: |
          git commit -am "Format Python code with psf/black"
          git push origin HEAD:$GITHUB_REF

      - name: Synchronize dependencies
        shell: python
        run: |
          import fileinput, re
          with open('requirements.txt') as f:
            versions = [ line.strip().split('==') for line in f.readlines() ]
          versions = [ (re.compile(v[0] + r'==[.0-9]+'), v[0] + '==' + v[1]) for v in versions ]
          with fileinput.input(files=('setup.cfg', '.pre-commit-hooks.yaml'), inplace=True) as f:
              for line in f:
                  for pattern, replacement in versions:
                    line = pattern.sub(replacement, line)
                  print(line, end='')

      - name: Check for modified files update
        id: git-check-updates
        run: echo ::set-output name=modified::$(if [[ -z "$(git status --porcelain)" ]]; then echo "false"; else echo "true"; fi)

      - name: Push update changes
        if: steps.git-check-updates.outputs.modified == 'true'
        run: |
          git commit -am "Update dependencies in all config files"
          git push origin HEAD:$GITHUB_REF
